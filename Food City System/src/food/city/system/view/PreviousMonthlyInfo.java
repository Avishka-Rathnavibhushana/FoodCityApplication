/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package food.city.system.view;

import food.city.system.controller.DailyInfoController;
import food.city.system.controller.MonthlyInfoController;
import food.city.system.dto.ItemDTO;
import food.city.system.dto.OrderDetailDTO;
import food.city.system.dto.PaysheetDTO;
import food.city.system.dto.SupplyDeteilDTO;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.SQLException;
import java.text.DateFormatSymbols;
import java.time.LocalDate;
import java.time.YearMonth;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import static javax.swing.WindowConstants.DISPOSE_ON_CLOSE;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Avishka
 */
public class PreviousMonthlyInfo extends javax.swing.JFrame {

    /**
     * Creates new form PreviousMonthlyInfo
     */
    
    private MonthlyInfoController monthlyInfoController;
    private float totRevenue = 0;
    private float totSupply = 0;
    private float totPayment = 0;
    private float tot = 0;
    private String needMonth;
    private ArrayList<OrderDetailDTO> ordersDetails;
    private ArrayList<SupplyDeteilDTO> suppliersItemsDetails;
    private ArrayList<PaysheetDTO> paysheetDTOs;
    private boolean showAll = false;
    private Main main;
    
    private int START_YEAR = 2020;
    private String[] monthList;
    private int comboMonth=1;
    private int comboYear=2020;
    
    public PreviousMonthlyInfo(Main main) {
        initComponents();
        
        this.setLocationRelativeTo(null);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        
        this.main = main;
        main.setVisible(false);
        
        String today = LocalDate.now().toString();
        int currYear = Integer.parseInt(today.substring(0, 4));
        monthList = new DateFormatSymbols().getMonths();
        
        for (int i = START_YEAR; i <= currYear; i++) {
            yearComboBox.addItem(currYear+"");
        }

        for (String string : monthList) {
            if (string.equals("")) {
                continue;
            }
            monthComboBox.addItem(string);
        }
        
        if (comboMonth<10) {
            needMonth = comboYear+"-0"+comboMonth;
        }else{
            needMonth = comboYear+"-"+comboMonth;
        }
        
        this.monthlyInfoController = new MonthlyInfoController();
        
        addWindowListener(new WindowAdapter()
        {
            @Override
            public void windowClosing(WindowEvent e)
            {
                main.setVisible(true);
                e.getWindow().dispose();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane6 = new javax.swing.JScrollPane();
        SupplierDetailTbl = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        OrderDetailTbl = new javax.swing.JTable();
        mainLabel1 = new javax.swing.JLabel();
        mainLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        ShowAllOrderItemsbtn = new javax.swing.JButton();
        ShowAllSupplyItemsbtn = new javax.swing.JButton();
        grossProfitTxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        OrderItemsTbl = new javax.swing.JTable();
        totRevenuetxt = new javax.swing.JTextField();
        totGoodExpencetxt = new javax.swing.JTextField();
        mainLabel = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        SupplyItemsTbl = new javax.swing.JTable();
        jlabel = new javax.swing.JLabel();
        yearComboBox = new javax.swing.JComboBox<>();
        monthComboBox = new javax.swing.JComboBox<>();
        searchbtn = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        netProfitTxt = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        totEmployeePaymentExpencetxt = new javax.swing.JTextField();
        mainLabel4 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        EmployeeTbl = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        SupplierDetailTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Supplier ID", "Total Bill", "Date", "Receipt ID"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Float.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane6.setViewportView(SupplierDetailTbl);

        OrderDetailTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Order ID", "Customer ID", "Total Bill", "Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(OrderDetailTbl);

        mainLabel1.setFont(new java.awt.Font("Book Antiqua", 1, 18)); // NOI18N
        mainLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        mainLabel1.setText("Order Information");

        mainLabel2.setFont(new java.awt.Font("Book Antiqua", 1, 18)); // NOI18N
        mainLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        mainLabel2.setText("Supply Information");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("GROSS PROFIT :");

        ShowAllOrderItemsbtn.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        ShowAllOrderItemsbtn.setText("Show All");
        ShowAllOrderItemsbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowAllOrderItemsbtnActionPerformed(evt);
            }
        });

        ShowAllSupplyItemsbtn.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        ShowAllSupplyItemsbtn.setText("Show All");
        ShowAllSupplyItemsbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowAllSupplyItemsbtnActionPerformed(evt);
            }
        });

        grossProfitTxt.setEditable(false);
        grossProfitTxt.setBackground(new java.awt.Color(255, 255, 255));
        grossProfitTxt.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        grossProfitTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grossProfitTxtActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Total Expense for Goods :");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Total Revenue :");

        OrderItemsTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item ID", "Price", "Quantity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Float.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(OrderItemsTbl);

        totRevenuetxt.setEditable(false);
        totRevenuetxt.setBackground(new java.awt.Color(255, 255, 255));
        totRevenuetxt.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        totRevenuetxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totRevenuetxtActionPerformed(evt);
            }
        });

        totGoodExpencetxt.setEditable(false);
        totGoodExpencetxt.setBackground(new java.awt.Color(255, 255, 255));
        totGoodExpencetxt.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        totGoodExpencetxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totGoodExpencetxtActionPerformed(evt);
            }
        });

        mainLabel.setFont(new java.awt.Font("Droid Sans", 1, 24)); // NOI18N
        mainLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        mainLabel.setText("Monthly Information History");

        SupplyItemsTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item ID", "Price", "Quantity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Float.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane7.setViewportView(SupplyItemsTbl);

        jlabel.setFont(new java.awt.Font("Droid Sans", 0, 18)); // NOI18N
        jlabel.setText("Date : ");

        yearComboBox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        yearComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yearComboBoxActionPerformed(evt);
            }
        });

        monthComboBox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        monthComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monthComboBoxActionPerformed(evt);
            }
        });

        searchbtn.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        searchbtn.setText("Search");
        searchbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchbtnActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setText("NET PROFIT :");

        netProfitTxt.setEditable(false);
        netProfitTxt.setBackground(new java.awt.Color(255, 255, 255));
        netProfitTxt.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        netProfitTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                netProfitTxtActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel5.setText("Total Expense for Employee Payments :");

        totEmployeePaymentExpencetxt.setEditable(false);
        totEmployeePaymentExpencetxt.setBackground(new java.awt.Color(255, 255, 255));
        totEmployeePaymentExpencetxt.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        totEmployeePaymentExpencetxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totEmployeePaymentExpencetxtActionPerformed(evt);
            }
        });

        mainLabel4.setFont(new java.awt.Font("Book Antiqua", 1, 18)); // NOI18N
        mainLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        mainLabel4.setText("Emplyee Payment Information");

        EmployeeTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Employee ID", "Name", "Fixed Salary", "OT Rate", "OT Hours", "OT Total", "Total Salary"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.Float.class, java.lang.Object.class, java.lang.Float.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane8.setViewportView(EmployeeTbl);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mainLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane7))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(mainLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(grossProfitTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addComponent(ShowAllSupplyItemsbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(totGoodExpencetxt, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(531, 531, 531)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(netProfitTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(54, 54, 54)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(totEmployeePaymentExpencetxt, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 832, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jlabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(yearComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(monthComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(141, 141, 141)
                                .addComponent(searchbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(mainLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mainLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(53, 53, 53)
                                .addComponent(ShowAllOrderItemsbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(335, 335, 335)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(totRevenuetxt, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 461, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(mainLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlabel)
                    .addComponent(yearComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(monthComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchbtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 192, Short.MAX_VALUE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ShowAllOrderItemsbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(totRevenuetxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ShowAllSupplyItemsbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(totGoodExpencetxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(grossProfitTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(23, 23, 23))
                    .addComponent(mainLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(totEmployeePaymentExpencetxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(netProfitTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void ShowAllOrderItemsbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowAllOrderItemsbtnActionPerformed
        showAllOdersThisMonth(needMonth);
    }//GEN-LAST:event_ShowAllOrderItemsbtnActionPerformed

    private void ShowAllSupplyItemsbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowAllSupplyItemsbtnActionPerformed
        showAllSuppliersThisMonth(needMonth);
    }//GEN-LAST:event_ShowAllSupplyItemsbtnActionPerformed

    private void grossProfitTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grossProfitTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_grossProfitTxtActionPerformed

    private void totRevenuetxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totRevenuetxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totRevenuetxtActionPerformed

    private void totGoodExpencetxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totGoodExpencetxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totGoodExpencetxtActionPerformed

    private void netProfitTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_netProfitTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_netProfitTxtActionPerformed

    private void totEmployeePaymentExpencetxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totEmployeePaymentExpencetxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totEmployeePaymentExpencetxtActionPerformed

    private void monthComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monthComboBoxActionPerformed
        comboMonth = monthComboBox.getSelectedIndex()+1;
    }//GEN-LAST:event_monthComboBoxActionPerformed

    private void yearComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yearComboBoxActionPerformed
        comboYear = Integer.parseInt((String) yearComboBox.getSelectedItem());
    }//GEN-LAST:event_yearComboBoxActionPerformed

    private void searchbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchbtnActionPerformed
        showAll = false;
        totRevenue = 0;
        totSupply = 0;
        totPayment = 0;
        tot = 0;
        totRevenuetxt.setText("0.0");
        totGoodExpencetxt.setText("0.0");
        grossProfitTxt.setText("0.0");
        totEmployeePaymentExpencetxt.setText("0.0");
        if (yearComboBox.getSelectedItem()!=null) {
            comboMonth = monthComboBox.getSelectedIndex()+1;
        }
        
        if (comboMonth<10) {
            needMonth = comboYear+"-0"+comboMonth;
        }else{
            needMonth = comboYear+"-"+comboMonth;
        }
        
        try {
            this.ordersDetails = monthlyInfoController.getAllOrdersThisMonth(needMonth);
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(DailyInfo.class.getName()).log(Level.SEVERE, null, ex);
        }

        showAllOdersThisMonth(needMonth);

        OrderDetailTbl.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {

                if (OrderDetailTbl.getSelectedRow() == -1) {
                    return;
                }

                String Oid = (String) OrderDetailTbl.getValueAt(OrderDetailTbl.getSelectedRow(), 0);
                for (OrderDetailDTO ordersDetail : ordersDetails) {
                    if (ordersDetail.getOid().equals(Oid)) {
                        DefaultTableModel dtm = (DefaultTableModel) OrderItemsTbl.getModel();
                        dtm.setRowCount(0);
                        showOderItems(ordersDetail.getItemList());
                    }
                }
            }
        });

        try {
            this.suppliersItemsDetails = monthlyInfoController.getAllSuppliersThisMonth(needMonth);
        } catch (SQLException ex) {
            Logger.getLogger(DailyInfo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(DailyInfo.class.getName()).log(Level.SEVERE, null, ex);
        }

        showAllSuppliersThisMonth(needMonth);
        showAll = true;

        SupplierDetailTbl.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {

                if (SupplierDetailTbl.getSelectedRow() == -1) {
                    return;
                }

                int srID = (int) SupplierDetailTbl.getValueAt(SupplierDetailTbl.getSelectedRow(), 3);
                for (SupplyDeteilDTO supplyDeteilDTO : suppliersItemsDetails) {
                    if (supplyDeteilDTO.getSrID() == srID) {
                        DefaultTableModel dtm = (DefaultTableModel) SupplyItemsTbl.getModel();
                        dtm.setRowCount(0);
                        showSupplierItems(supplyDeteilDTO.getItemList());
                    }
                }
            }
        });

        try {
            this.paysheetDTOs = monthlyInfoController.getAllPaysheetsThisMonth(needMonth);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MonthlyInfo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(MonthlyInfo.class.getName()).log(Level.SEVERE, null, ex);
        }

        showAllPaysheetsThisMonth(needMonth);
        totEmployeePaymentExpencetxt.setText(totPayment+"");

        showProfitInfoThisMonth(needMonth);
    }//GEN-LAST:event_searchbtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PreviousMonthlyInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PreviousMonthlyInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PreviousMonthlyInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PreviousMonthlyInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable EmployeeTbl;
    private javax.swing.JTable OrderDetailTbl;
    private javax.swing.JTable OrderItemsTbl;
    private javax.swing.JButton ShowAllOrderItemsbtn;
    private javax.swing.JButton ShowAllSupplyItemsbtn;
    private javax.swing.JTable SupplierDetailTbl;
    private javax.swing.JTable SupplyItemsTbl;
    private javax.swing.JTextField grossProfitTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JLabel jlabel;
    private javax.swing.JLabel mainLabel;
    private javax.swing.JLabel mainLabel1;
    private javax.swing.JLabel mainLabel2;
    private javax.swing.JLabel mainLabel4;
    private javax.swing.JComboBox<String> monthComboBox;
    private javax.swing.JTextField netProfitTxt;
    private javax.swing.JButton searchbtn;
    private javax.swing.JTextField totEmployeePaymentExpencetxt;
    private javax.swing.JTextField totGoodExpencetxt;
    private javax.swing.JTextField totRevenuetxt;
    private javax.swing.JComboBox<String> yearComboBox;
    // End of variables declaration//GEN-END:variables
    private void showAllOdersThisMonth(String thisMonth) {
        DefaultTableModel dtm=(DefaultTableModel) OrderDetailTbl.getModel();
        dtm.setRowCount(0);
        DefaultTableModel dtm1=(DefaultTableModel) OrderItemsTbl.getModel();
        dtm1.setRowCount(0);
        for (OrderDetailDTO orderDetails : ordersDetails) {
            Object[] rowData={orderDetails.getOid(),orderDetails.getCid(),orderDetails.getTotal(),orderDetails.getDate()};
            dtm.addRow(rowData);
            if (showAll==false) {
                totRevenue = totRevenue + orderDetails.getTotal();
            }
            showOderItems(orderDetails.getItemList());
        }
        totRevenuetxt.setText(totRevenue+"");
        
    }

    private void showOderItems(ArrayList<ItemDTO> orderItems) {
        for (ItemDTO item : orderItems) {
            Object[] rowData={item.getIid(),item.getSellingPrice(),item.getNoOfItems()};
            DefaultTableModel dtm=(DefaultTableModel) OrderItemsTbl.getModel();
            dtm.addRow(rowData);
        }
    }

    private void showAllSuppliersThisMonth(String thisMonth){
        DefaultTableModel dtm=(DefaultTableModel) SupplierDetailTbl.getModel();
        dtm.setRowCount(0);
        DefaultTableModel dtm1=(DefaultTableModel) SupplyItemsTbl.getModel();
        dtm1.setRowCount(0);
        for (SupplyDeteilDTO supplierItemsDetail : suppliersItemsDetails) {
            Object[] rowData={supplierItemsDetail.getSid(),supplierItemsDetail.getTotal(),supplierItemsDetail.getDate(),supplierItemsDetail.getSrID()};
            dtm.addRow(rowData);
            if (showAll==false) {
                totSupply = totSupply + supplierItemsDetail.getTotal();
            }
            showSupplierItems(supplierItemsDetail.getItemList());
            totGoodExpencetxt.setText(totSupply+"");
        }
    }

    private void showSupplierItems(ArrayList<ItemDTO> items) {
        for (ItemDTO item : items) {
            Object[] rowData={item.getIid(),item.getBuyingPrice(),item.getNoOfItems()};
            DefaultTableModel dtm=(DefaultTableModel) SupplyItemsTbl.getModel();
            dtm.addRow(rowData);
        }
    }

    private void showProfitInfoThisMonth(String thisMonth) {
        grossProfitTxt.setText((totRevenue-totSupply)+"");
        netProfitTxt.setText((totRevenue-totSupply-totPayment)+"");
    }

    private void showAllPaysheetsThisMonth(String thisMonth) {
        DefaultTableModel dtm1=(DefaultTableModel) EmployeeTbl.getModel();
        dtm1.setRowCount(0);
        for (PaysheetDTO paysheetDTO : paysheetDTOs) {
            Object[] rowData={paysheetDTO.getEid(),paysheetDTO.getName(),paysheetDTO.getFixedSalary(),paysheetDTO.getOtRate(),paysheetDTO.getOtHours(),paysheetDTO.getOtAmount(),paysheetDTO.getTotalSalary()};
            DefaultTableModel dtm=(DefaultTableModel) EmployeeTbl.getModel();
            dtm.addRow(rowData);
            totPayment = totPayment + paysheetDTO.getTotalSalary();
        }
    }
    
}
