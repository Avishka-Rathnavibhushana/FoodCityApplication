/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package food.city.system.view;

import food.city.system.controller.BillGeneratorController;
import food.city.system.dto.ItemDTO;
import food.city.system.dto.OrderDetailDTO;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Avishka
 */
public class BillGenerator extends javax.swing.JFrame {
    
    private BillGeneratorController billGeneratorController;
    private float tot = 0;
    private Main main;
    
    /** Creates new form BillGenerator */
    public BillGenerator(Main main) {
        initComponents();
        this.setLocationRelativeTo(null);
        
        this.billGeneratorController = new BillGeneratorController();
        
        this.main = main;
        main.setVisible(false);
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        
        setOrderDate();
        loadCustomerID();
        loadOrderID();
        customerNameTxt.requestFocus();
        
        addWindowListener(new WindowAdapter()
        {
            @Override
            public void windowClosing(WindowEvent e)
            {
                main.setVisible(true);
                e.getWindow().dispose();
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        orderItemInfoTable = new javax.swing.JTable();
        mainLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        ItemIdtxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        ItemNametxt = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        ItemPricetxt = new javax.swing.JTextField();
        RemainingItemstxt = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        ItemQtytxt = new javax.swing.JTextField();
        totalAmounttxt = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        OrderDatetxt = new javax.swing.JTextField();
        jlabel = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        orderIdText = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        customerNameTxt = new javax.swing.JTextField();
        customerIdTxt = new javax.swing.JTextField();
        mainLabel1 = new javax.swing.JLabel();
        mainLabel2 = new javax.swing.JLabel();
        saveOrderBtn = new javax.swing.JButton();
        removeItemBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        orderItemInfoTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item ID", "Item Name", "Quantity", "Unit Price", "Amount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Float.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(orderItemInfoTable);

        mainLabel.setFont(new java.awt.Font("Droid Sans", 1, 24)); // NOI18N
        mainLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        mainLabel.setText("Billing Machine");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Item ID : ");

        ItemIdtxt.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        ItemIdtxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemIdtxtActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Item Name : ");

        ItemNametxt.setEditable(false);
        ItemNametxt.setBackground(new java.awt.Color(255, 255, 255));
        ItemNametxt.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        ItemNametxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemNametxtActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel5.setText("Remaining Items : ");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setText("Unit Price : ");

        ItemPricetxt.setEditable(false);
        ItemPricetxt.setBackground(new java.awt.Color(255, 255, 255));
        ItemPricetxt.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        ItemPricetxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemPricetxtActionPerformed(evt);
            }
        });

        RemainingItemstxt.setEditable(false);
        RemainingItemstxt.setBackground(new java.awt.Color(255, 255, 255));
        RemainingItemstxt.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        RemainingItemstxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemainingItemstxtActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("Quantity : ");

        ItemQtytxt.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        ItemQtytxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemQtytxtActionPerformed(evt);
            }
        });

        totalAmounttxt.setEditable(false);
        totalAmounttxt.setBackground(new java.awt.Color(255, 255, 255));
        totalAmounttxt.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        totalAmounttxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalAmounttxtActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setText("Total Amount : ");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel7.setText("Order Date : ");

        OrderDatetxt.setEditable(false);
        OrderDatetxt.setBackground(new java.awt.Color(255, 255, 255));
        OrderDatetxt.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        OrderDatetxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OrderDatetxtActionPerformed(evt);
            }
        });

        jlabel.setFont(new java.awt.Font("Droid Sans", 0, 18)); // NOI18N
        jlabel.setText("Customer Id : ");

        jLabel9.setFont(new java.awt.Font("Droid Sans", 0, 18)); // NOI18N
        jLabel9.setText("Order ID : ");

        orderIdText.setEditable(false);
        orderIdText.setBackground(new java.awt.Color(255, 255, 255));
        orderIdText.setFont(new java.awt.Font("Droid Sans", 1, 18)); // NOI18N

        jLabel10.setFont(new java.awt.Font("Droid Sans", 0, 18)); // NOI18N
        jLabel10.setText("Customer Name : ");

        customerNameTxt.setFont(new java.awt.Font("Droid Sans", 1, 18)); // NOI18N
        customerNameTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerNameTxtActionPerformed(evt);
            }
        });
        customerNameTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                customerNameTxtKeyReleased(evt);
            }
        });

        customerIdTxt.setEditable(false);
        customerIdTxt.setBackground(new java.awt.Color(255, 255, 255));
        customerIdTxt.setFont(new java.awt.Font("Droid Sans", 1, 18)); // NOI18N
        customerIdTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerIdTxtActionPerformed(evt);
            }
        });

        mainLabel1.setFont(new java.awt.Font("Droid Sans", 1, 18)); // NOI18N
        mainLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        mainLabel1.setText("Order Item Detail");

        mainLabel2.setFont(new java.awt.Font("Droid Sans", 1, 18)); // NOI18N
        mainLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        mainLabel2.setText("Order Details");

        saveOrderBtn.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        saveOrderBtn.setText("Save");
        saveOrderBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveOrderBtnActionPerformed(evt);
            }
        });

        removeItemBtn.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        removeItemBtn.setText("Remove Item");
        removeItemBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeItemBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mainLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 733, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(totalAmounttxt, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(removeItemBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(saveOrderBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(orderIdText, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jLabel7)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(OrderDatetxt, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jlabel)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(customerIdTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jLabel10)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(customerNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(ItemNametxt, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jLabel4)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(ItemPricetxt, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(ItemIdtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel5)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(RemainingItemstxt, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jLabel3)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(ItemQtytxt, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 733, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(mainLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(mainLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addComponent(mainLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlabel)
                    .addComponent(customerIdTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(customerNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(orderIdText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(OrderDatetxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(mainLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(ItemIdtxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(RemainingItemstxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(ItemQtytxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(ItemNametxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(ItemPricetxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(totalAmounttxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveOrderBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(removeItemBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ItemIdtxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemIdtxtActionPerformed
        String itemID = ItemIdtxt.getText();
        loadItemDetails(itemID);
    }//GEN-LAST:event_ItemIdtxtActionPerformed

    private void ItemNametxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemNametxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ItemNametxtActionPerformed

    private void ItemPricetxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemPricetxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ItemPricetxtActionPerformed

    private void RemainingItemstxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemainingItemstxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RemainingItemstxtActionPerformed

    private void ItemQtytxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemQtytxtActionPerformed
        String itemID = ItemIdtxt.getText();
        String itemName = ItemNametxt.getText();
        int itemQty = Integer.parseInt(ItemQtytxt.getText());
        int remainingItemQty = Integer.parseInt(RemainingItemstxt.getText());
        if (itemQty>remainingItemQty) {
            JOptionPane.showMessageDialog(this, "Quntity is insufficient");
            return;
        }
        float itemPrice = Float.parseFloat(ItemPricetxt.getText());
        float amount = itemQty*itemPrice;
        tot = tot + amount;
        totalAmounttxt.setText(tot+"");
        Object[] rowData={itemID,itemName,itemQty,itemPrice,amount};
        DefaultTableModel dtm=(DefaultTableModel) orderItemInfoTable.getModel();
        dtm.addRow(rowData);
        ItemIdtxt.requestFocus();
        clearFields();
    }//GEN-LAST:event_ItemQtytxtActionPerformed

    private void totalAmounttxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalAmounttxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totalAmounttxtActionPerformed

    private void OrderDatetxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OrderDatetxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_OrderDatetxtActionPerformed

    private void customerNameTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerNameTxtActionPerformed
        ItemIdtxt.requestFocus();
    }//GEN-LAST:event_customerNameTxtActionPerformed

    private void customerIdTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerIdTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_customerIdTxtActionPerformed

    private void saveOrderBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveOrderBtnActionPerformed
        String orderId=orderIdText.getText();
        String customerId= customerIdTxt.getText();
        String date = OrderDatetxt.getText();
        String customerName = customerNameTxt.getText();
        if (customerName.equals("")) {
            customerNameTxt.requestFocus();
            JOptionPane.showMessageDialog(this, "Fill Customer Name.");
            return;
        }
        
        ArrayList<ItemDTO> itemDetailList=new ArrayList<>();
        
        DefaultTableModel dtm=(DefaultTableModel) orderItemInfoTable.getModel();
        
        if (dtm.getRowCount()==0) {
            JOptionPane.showMessageDialog(this, "Add items first.");
            return;
        }
        
        for (int i = 0; i < dtm.getRowCount(); i++) {
            String itemID= (String) dtm.getValueAt(i, 0);
            int qty=(int) dtm.getValueAt(i, 2);
            float unitPrice=(float) dtm.getValueAt(i, 3);
            
            ItemDTO itemDTO = new ItemDTO(itemID, "", 0, unitPrice, qty,0);
            itemDetailList.add(itemDTO);
        }
        
        OrderDetailDTO orderDetailDTO = new OrderDetailDTO(customerId, customerName, orderId, date, tot, itemDetailList);
        
        try {  
            boolean isAdded = billGeneratorController.saveOrder(orderDetailDTO);
            if(isAdded){
                JOptionPane.showMessageDialog(this, "Added Success");
                loadCustomerID();
                loadOrderID();
                dtm.setRowCount(0);
                customerNameTxt.setText("");
                totalAmounttxt.setText("");
                tot = 0;
                customerNameTxt.requestFocus();
            }
        } catch (Exception ex) {
            Logger.getLogger(BillGenerator.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_saveOrderBtnActionPerformed

    private void customerNameTxtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_customerNameTxtKeyReleased
        
    }//GEN-LAST:event_customerNameTxtKeyReleased

    private void removeItemBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeItemBtnActionPerformed
       if (orderItemInfoTable.getSelectedRow() == -1) {
                JOptionPane.showMessageDialog(this, "Select an Item first");
                return;
            }
       float amount = (float) orderItemInfoTable.getValueAt(orderItemInfoTable.getSelectedRow(), 4);
       tot = tot - amount;
       totalAmounttxt.setText(tot+"");
       DefaultTableModel dtm=(DefaultTableModel) orderItemInfoTable.getModel();
       
       dtm.removeRow(orderItemInfoTable.getSelectedRow());
       ItemIdtxt.requestFocus();;
    }//GEN-LAST:event_removeItemBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BillGenerator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BillGenerator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BillGenerator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BillGenerator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ItemIdtxt;
    private javax.swing.JTextField ItemNametxt;
    private javax.swing.JTextField ItemPricetxt;
    private javax.swing.JTextField ItemQtytxt;
    private javax.swing.JTextField OrderDatetxt;
    private javax.swing.JTextField RemainingItemstxt;
    private javax.swing.JTextField customerIdTxt;
    private javax.swing.JTextField customerNameTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel jlabel;
    private javax.swing.JLabel mainLabel;
    private javax.swing.JLabel mainLabel1;
    private javax.swing.JLabel mainLabel2;
    private javax.swing.JTextField orderIdText;
    private javax.swing.JTable orderItemInfoTable;
    private javax.swing.JButton removeItemBtn;
    private javax.swing.JButton saveOrderBtn;
    private javax.swing.JTextField totalAmounttxt;
    // End of variables declaration//GEN-END:variables

    private void setOrderDate() {
        LocalDate date=LocalDate.now();
        OrderDatetxt.setText(date.toString());
    }

    private void loadCustomerID() {
        try {
            String customerId = billGeneratorController.loadCustomerID();
            customerIdTxt.setText(customerId);
        } catch (SQLException ex) {
            Logger.getLogger(BillGenerator.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(BillGenerator.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void loadOrderID() {
        try {
            String orderId = billGeneratorController.loadOrderID();
            orderIdText.setText(orderId);
        } catch (SQLException ex) {
            Logger.getLogger(BillGenerator.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(BillGenerator.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void loadItemDetails(String itemID) {
        try {
            ItemDTO itemDTO = billGeneratorController.getItemDetails(itemID);
            if (itemDTO==null) {
                JOptionPane.showMessageDialog(this, "Incorrect Item ID");
                return;
            }
            RemainingItemstxt.setText(itemDTO.getNoOfItems()+"");
            ItemNametxt.setText(itemDTO.getName());
            ItemPricetxt.setText(itemDTO.getSellingPrice()+"");
            ItemQtytxt.requestFocus();
        } catch (Exception ex) {
            Logger.getLogger(BillGenerator.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void clearFields() {
        ItemIdtxt.setText("");
        ItemNametxt.setText("");
        ItemPricetxt.setText("");
        ItemQtytxt.setText("");
        RemainingItemstxt.setText("");
    }

}
